import { NONAME } from "dns";

typeof x;     //Этот оператор имеет два вида написания;
typeof(x);    //Он будт віводить тип данных
Boolean, Number, String


let rer = '123';
console.log(typeof(rer));   //String
rer = Number(rer);
console.log(typeof rer)    //Number




let age = Number("Любая строка вместо числа");
console.log(age); // NaN, преобразование  не удалось

0, null, undefined, NaN, ""	== false;
'любое другое значение' == true;


// Как это будет ввыводится ?

"" + 1 + 0
"" - 1 + 0
true + false
6 / "3"
"2" * "3"
4 + 5 + "px"
"$" + 4 + 5
"4" - 2
"4px" - 2
7 / 0
"  -9  " + 5
"  -9  " - 5
null + 1
undefined + 1
" \t \n" - 2















































// "" + 1 + 0 = "10" // (1)
// "" - 1 + 0 = -1 // (2)
// true + false = 1
// 6 / "3" = 2
// "2" * "3" = 6
// 4 + 5 + "px" = "9px"
// "$" + 4 + 5 = "$45"
// "4" - 2 = 2
// "4px" - 2 = NaN
// 7 / 0 = Infinity
// " -9  " + 5 = " -9  5" // (3)
// " -9  " - 5 = -14 // (4)
// null + 1 = 1 // (5)
// undefined + 1 = NaN // (6)
// " \t \n" - 2 = -2 // (7)
// Сложение со строкой "" + 1 преобразует 1 к строке: "" + 1 = "1", и в следующем случае "1" + 0, работает то же самое правило.
// Вычитание - (как и большинство математических операторов) работает только с числами, пустая строка "" приводится к 0.
// Сложение со строкой превращает число 5 в строку и добавляет к строке.
// Вычитание всегда преобразует к числу, значит строка " -9 " становится числом -9 (пробелы по краям обрезаются).
// null становится 0 после численного преобразования.
// undefined становится NaN после численного преобразования.
// Пробельные символы, такие как \t и \n по краям строки игнорируются при преобразовании в число, 
// так что строка \t \n, аналогично пустой строке, становится 0 после численного преобразования.



