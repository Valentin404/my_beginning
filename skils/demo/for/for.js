
for(i=0;i<a.length;i++)



nextPrime:
for (let i = 2;i<=10;i++){               // Для всех i...
  for(j=2; j <i;j++){                   // проверить, делится ли число..
    if(i % j == 0) continue nextPrime; // не подходит, берём следующее
      console.log(i);
    
  }
}



// В JS нет переходов по метке, но зато
//  есть операторы continue и break которые
//   на самом деле выглядят как continue <метка> и break <метка>.


// Что происходит, когда интерпретатор находит continue <метка> в цикле.
//  Если метки нет, он просто выполняет следующую итерацию. Если же она
//  есть, то выполняет следующую итерацию цикла, помеченного этой меткой.
//  Кстати, это единственный возможный способ в JS воздействовать из
//  внутреннего цикла на внешний. Собственно, в этом и состоял Ваш
//  вопрос (по continue nextPrime; выполнялась следующая итерация внешнего цикла)


break
// это в if прекращает выполнения цикла
continue
// в if выбивает из цикла один обьект
for (let index = 0; index < 10; index++) {
  if (i == 6) continue;
  // 1 2 3 4 5 7 8 9 
  if (i == 6) break;
  //1 2 3 4 5
  
}
